$clock.__sbits = 1
$io.reset.__ubits = 1
$io.enable.__ubits = 1
$io.mask.0.__ubits = 1
$io.mask.1.__ubits = 1
$io.mask.2.__ubits = 1
$io.mask.3.__ubits = 1
$io.write.__ubits = 1
$io.addr.__ubits = 10
$io.dataIn.__ubits = 32
%dataOut.0.__ubits = 8
%dataOut.1.__ubits = 8
%dataOut.2.__ubits = 8
%dataOut.3.__ubits = 8

F0 = mem_interface_args.__last_value
mem_res = __memory(F0)

mem_addr    = ()
mem_din     = ()
mem_enable  = ()
mem_fwd     = 0
mem_latency = ()
mem_wensize = 4
mem_size    = 0b0000010000000000 //1024
mem_rdport  = ()

if (true) {
  mem_clock     = $clock
  mem_addr.0    = 0
  mem_enable.0  = 0
  mem_latency.0 = 0
  mem_rdport.0  = true  
  mem_din.0.0   = 0
  mem_din.0.1   = 0
  mem_din.0.2   = 0
  mem_din.0.3   = 0
  mem_latency.0 = 1
  mem_rdport.0  = false
  F4            = MPORT.__last_value
  mem_din.0     = F4

  mem_clock           = $clock 
  mem_addr.1          = 0
  mem_enable.1        = 0
  mem_latency.1       = 0
  mem_rdport.1        = true
  mem_res.1.0.__ubits = 8
  mem_res.1.1.__ubits = 8
  mem_res.1.2.__ubits = 8
  mem_res.1.3.__ubits = 8
  
  //din struct recovery
  F16                 = mem_din.0  
  dataOut_MPORT       = F16

  F17                 = mem_res.1
  dataOut_MPORT       := F17
}



F1            = $io.addr
mem_addr.0    = F1
mem_enable.0  = 1
// mem_latency.0 = 1
// mem_rdport.0  = false 

F2 = $io.mask.0

if (F2) {
    F3 = $io.dataIn.0
    mem_enable.0 = 1 
    MPORT.0 = F3
}

F5 = $io.mask.1
if (F5) {
    F6 = $in.dataIn.1
    mem_enable.0 = 3
    MPORT.1 = F6
}

F7 = $io.mask.2
if (F7) {
    F8 = $in.dataIn.2
    mem_enable.0 = 7
    MPORT.2 = F8
}

F9 = $io.mask.3
if (F9) {
    F10 = $in.dataIn.3
    mem_enable.0 = 15
    MPORT.3 = F10
}

_WIRE = 0
F11 = $io.enable

if (F11) {
    _WIRE = $io.addr
    _T    = _WIRE
    _T1   = _T
    mem_addr.1 = _T1
    mem_enable.1 = 1
}

mem_latency.1 = 1
mem_rdport.1  = true 
F12 = dataOut_MPORT.0 
F13 = dataOut_MPORT.1 
F14 = dataOut_MPORT.2 
F15 = dataOut_MPORT.3 
%dataOut.0 = F12
%dataOut.1 = F13
%dataOut.2 = F14
%dataOut.3 = F15

F19 = mem_din.0  // port 0 is wr
F21 = mem_din.1  // port 1 is rd

F18 = F19@()
F22 = F21@()
F24 = (F18, F22) 

F25 = (addr = mem_addr, clock = mem_clock, din = F24, enable = mem_enable, fwd = mem_fwd, latency = mem_latency, wensize = mem_wensize, size = mem_size, rdport = mem_rdport)
mem_interface_args = F25

