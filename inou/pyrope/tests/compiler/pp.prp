foo = 7

tmp = tup.1.__last_value
tup = (0, (a = 2, b = 3), foo)

%out = tmp.b

// $clock.__sbits = 1
// $io.reset.__ubits = 1
// $io.enable.__ubits = 1
// $io.write.__ubits = 1
// $io.addr.__ubits = 10
// $io.dataIn.__ubits = 32
// %dataOut.__ubits = 32

// F7 = mem_interface_args.__last_value
// mem_res = __memory(F7)

// mem_addr    = ()
// mem_din     = ()
// mem_enable  = ()
// mem_fwd     = 0
// mem_latency = ()
// mem_wensize = 1
// mem_size    = 0b0000010000000000 //1024
// mem_rdport  = ()

// if (true) {
//   mem_clock     = $clock
//   mem_addr.0    = 0
//   mem_enable.0  = 0
//   mem_latency.0 = 0
//   mem_rdport.0  = true  
//   mem_din.0     = 0

//   mem_clock         = $clock 
//   mem_addr.1        = 0
//   mem_enable.1      = 0
//   mem_latency.1     = 0
//   mem_rdport.1      = true
//   // bug? where is mem_din.1 = 0? should you also provide it?
//   mem_res.1.__ubits = 32
//   F14               = mem_res.1
//   dataOut_MPORT     = F14
// }

// F8            = $io.addr
// mem_addr.0    = F8
// mem_enable.0  = 1
// mem_latency.0 = 1
// mem_rdport.0  = false 

// F9            = MPORT.__last_value
// mem_din.0     = F9
// MPORT         = $io.dataIn

// dataOut_WIRE = 0
// F11          = $io.enable

// if (F11) {
//   dataOut_WIRE = $io.addr
//   dataOut_T    = dataOut_WIRE
//   dataOut_T_1  = dataOut_T
//   mem_addr.1   = dataOut_T_1
//   mem_enable.1 = 1
// }

// mem_latency.1 = 1
// mem_rdport.1  = true
// %dataOut = dataOut_MPORT

// F15 = (addr = mem_addr, clock = mem_clock, din = mem_din, enable = mem_enable, fwd = mem_fwd, latency = mem_latency, wensize = mem_wensize, size = mem_size, rdport = mem_rdport)
// mem_interface_args = F15

